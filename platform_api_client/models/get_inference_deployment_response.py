# coding: utf-8

"""
    Platform External API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 0.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from platform_api_client.models.auth_secret import AuthSecret
from platform_api_client.models.deployment_status import DeploymentStatus
from platform_api_client.models.deployment_type import DeploymentType
from typing import Optional, Set
from typing_extensions import Self

class GetInferenceDeploymentResponse(BaseModel):
    """
    GetInferenceDeploymentResponse
    """ # noqa: E501
    id: StrictInt
    name: StrictStr
    image_url: StrictStr
    type: DeploymentType
    status: DeploymentStatus
    created_at: datetime
    hardware_instance_id: StrictInt
    endpoint_url: Optional[StrictStr]
    env_vars: Optional[Dict[str, StrictStr]]
    secrets: Optional[AuthSecret]
    port: StrictInt
    min_replicas: StrictInt
    max_replicas: StrictInt
    timeout: StrictInt
    healthcheck: Optional[StrictStr]
    __properties: ClassVar[List[str]] = ["id", "name", "image_url", "type", "status", "created_at", "hardware_instance_id", "endpoint_url", "env_vars", "secrets", "port", "min_replicas", "max_replicas", "timeout", "healthcheck"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetInferenceDeploymentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of secrets
        if self.secrets:
            _dict['secrets'] = self.secrets.to_dict()
        # set to None if endpoint_url (nullable) is None
        # and model_fields_set contains the field
        if self.endpoint_url is None and "endpoint_url" in self.model_fields_set:
            _dict['endpoint_url'] = None

        # set to None if env_vars (nullable) is None
        # and model_fields_set contains the field
        if self.env_vars is None and "env_vars" in self.model_fields_set:
            _dict['env_vars'] = None

        # set to None if secrets (nullable) is None
        # and model_fields_set contains the field
        if self.secrets is None and "secrets" in self.model_fields_set:
            _dict['secrets'] = None

        # set to None if healthcheck (nullable) is None
        # and model_fields_set contains the field
        if self.healthcheck is None and "healthcheck" in self.model_fields_set:
            _dict['healthcheck'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetInferenceDeploymentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "image_url": obj.get("image_url"),
            "type": obj.get("type"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "hardware_instance_id": obj.get("hardware_instance_id"),
            "endpoint_url": obj.get("endpoint_url"),
            "env_vars": obj.get("env_vars"),
            "secrets": AuthSecret.from_dict(obj["secrets"]) if obj.get("secrets") is not None else None,
            "port": obj.get("port"),
            "min_replicas": obj.get("min_replicas"),
            "max_replicas": obj.get("max_replicas"),
            "timeout": obj.get("timeout"),
            "healthcheck": obj.get("healthcheck")
        })
        return _obj


